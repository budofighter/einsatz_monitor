; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "EinsatzHandler"
#define MyAppPublisher "Christian Siebold"
#define MyAppURL "https://github.com/budofighter/einsatz_monitor"
#define MyAppExeName "EinsatzHandler.exe"
#define MyAppAssocName MyAppName + " File"
#define MyAppAssocExt ".myp"
#define MyAppAssocKey StringChange(MyAppAssocName, " ", "") + MyAppAssocExt
#define MyAppVersion "1.0.1.1"

[Setup]
; NOTE: The value of AppId uniquely identifies this application. Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{D9B6CC1F-1D06-49BE-BE66-761110F44035}
AppName={#MyAppName}
AppVersion={#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={autopf}\{#MyAppName}
ChangesAssociations=yes
DisableProgramGroupPage=yes
InfoBeforeFile=C:\Users\chris\PycharmProjects\einsatz_monitor\README.md
; Uncomment the following line to run in non administrative install mode (install for current user only.)
PrivilegesRequired=admin
OutputDir=C:\Users\chris\PycharmProjects\einsatz_monitor\Installer
OutputBaseFilename="Setup_{#MyAppVersion}"
SetupIconFile=C:\Users\chris\PycharmProjects\einsatz_monitor\resources\fwsignet.ico
Compression=lzma
SolidCompression=yes
WizardStyle=modern

[Languages]
Name: "german"; MessagesFile: "compiler:Languages\German.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[Files]
Source: "C:\Users\chris\PycharmProjects\einsatz_monitor\dist\EinsatzHandler\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion;
Source: "C:\Users\chris\PycharmProjects\einsatz_monitor\dist\EinsatzHandler\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs;
Source: "C:\Users\chris\PycharmProjects\einsatz_monitor\python-3.11.5-amd64.exe"; DestDir: "{tmp}"; Flags: deleteafterinstall;
Source: "C:\Users\chris\PycharmProjects\einsatz_monitor\bin\install\requirements.txt"; DestDir: "{app}"; Flags: ignoreversion deleteafterinstall;
Source: "C:\Users\chris\PycharmProjects\einsatz_monitor\bin\install\setup_venv.bat"; DestDir: "{app}"; Flags: ignoreversion deleteafterinstall
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Registry]
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocExt}\OpenWithProgids"; ValueType: string; ValueName: "{#MyAppAssocKey}"; ValueData: ""; Flags: uninsdeletevalue
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}"; ValueType: string; ValueName: ""; ValueData: "{#MyAppAssocName}"; Flags: uninsdeletekey
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\DefaultIcon"; ValueType: string; ValueName: ""; ValueData: "{app}\{#MyAppExeName},0"
Root: HKA; Subkey: "Software\Classes\{#MyAppAssocKey}\shell\open\command"; ValueType: string; ValueName: ""; ValueData: """{app}\{#MyAppExeName}"" ""%1"""
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}\SupportedTypes"; ValueType: string; ValueName: ".myp"; ValueData: ""

; Erstellt einen Registry-Eintrag unter HKEY_LOCAL_MACHINE (HKLM) oder HKEY_CURRENT_USER (HKCU)
; Der Eintrag wird in den Pfad "Software\IhrUnternehmen\IhrProdukt" mit dem Schl�ssel "Version" und dem Wert "{#MyAppVersion}" gespeichert.
Root: HKA; Subkey: "Software\Classes\Applications\{#MyAppExeName}"; ValueType: string; ValueName: "Version"; ValueData: {#MyAppVersion}

[Icons]
Name: "{autoprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{autodesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon

[Run]
; Python installieren
Filename: "{tmp}\python-3.11.5-amd64.exe"; Parameters: "/quiet InstallAllUsers=1 PrependPath=1"; StatusMsg: "Installing Python..."; Flags: waituntilterminated runascurrentuser; Check: ShouldInstallPython

; Virtual Environment erstellen
Filename: "{app}\setup_venv.bat"; Description: "Richte virtuelle Umgebung ein und installiere Abhängigkeiten"; Flags: waituntilterminated runascurrentuser;

; Nach Installation das Programm starten
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(MyAppName, '&', '&&')}}"; Flags: nowait postinstall skipifsilent runascurrentuser;


[Code]

// Funktion um zu prüfen, ob Python schon installiert ist:
function ShouldInstallPython(): Boolean;
var
  InstallPath: String;
  UserReply: Integer;
begin
  // Prüfen Sie die Registry für die Installation von Python 3.11.5
  if RegQueryStringValue(HKEY_LOCAL_MACHINE, 'Software\Python\PythonCore\3.11\InstallPath', '', InstallPath) then begin
    MsgBox('Python 3.11.5 ist bereits installiert - überspringe Installation', mbInformation, MB_OK);
    Result := False;
  end else if RegQueryStringValue(HKEY_CURRENT_USER, 'Software\Python\PythonCore\3.11\InstallPath', '', InstallPath) then begin
    MsgBox('Python 3.11.5 ist bereits installiert - überspringe Installation', mbInformation, MB_OK);
    Result := False;
  end else begin
    UserReply := MsgBox('Python 3.11.5 ist noch nicht vorhanden - wird installiert', mbConfirmation, MB_OKCANCEL);
    if UserReply = IDOK then
      Result := True
    else
      Result := False;
  end;
end;


const
  MyPascalExeName = '{#MyAppExeName}';
  MyPascalAppVersion = '{#MyAppVersion}';  // Diese Zeile könnte durch ein externes Skript gesetzt werden

var
  IsUpdate: Boolean;

// Installierte Version besorgen
function GetInstalledVersion(): String;
var
  Version: String;
begin
  if RegQueryStringValue(HKLM, 'Software\Classes\Applications\{#MyAppName}', 'Version', Version) then
    Result := Version
  else
    Result := '';
end;

//Funktion im die Tokens zu kriegen
function GetToken(const AString, ASeparator: String; AIndex: Integer): String;
var
  I, StrCount, SepLen: Integer;
  S: String;
begin
  Result := '';
  S := AString;
  SepLen := Length(ASeparator);
  StrCount := 0;
  
  while (Length(S) > 0) and (StrCount <= AIndex) do
  begin
    I := Pos(ASeparator, S);
    if I = 0 then I := Length(S) + 1;
    
    if StrCount = AIndex then
    begin
      Result := Copy(S, 1, I - 1);
      Exit;
    end;
    
    Inc(StrCount);
    S := Copy(S, I + SepLen, Length(S));
  end;
end;

//Funktion um die Versionen zu vergleichen
function CompareVersions(Version1, Version2: String): Integer;
var
  Major1, Minor1, Patch1, Build1: Integer;
  Major2, Minor2, Patch2, Build2: Integer;
begin
  // Zerlegen der Version1 in ihre Komponenten
  StringChange(Version1, '.', ',');
  StringChange(Version2, '.', ',');
  Major1 := StrToInt(GetToken(Version1, ',', 0));
  Minor1 := StrToInt(GetToken(Version1, ',', 1));
  Patch1 := StrToInt(GetToken(Version1, ',', 2));
  Build1 := StrToInt(GetToken(Version1, ',', 3));

  // Zerlegen der Version2 in ihre Komponenten
  Major2 := StrToInt(GetToken(Version2, ',', 0));
  Minor2 := StrToInt(GetToken(Version2, ',', 1));
  Patch2 := StrToInt(GetToken(Version2, ',', 2));
  Build2 := StrToInt(GetToken(Version2, ',', 3));

  // Vergleich
  if Major1 > Major2 then Result := 1
  else if Major1 < Major2 then Result := -1
  else if Minor1 > Minor2 then Result := 1
  else if Minor1 < Minor2 then Result := -1
  else if Patch1 > Patch2 then Result := 1
  else if Patch1 < Patch2 then Result := -1
  else if Build1 > Build2 then Result := 1
  else if Build1 < Build2 then Result := -1
  else Result := 0;
end;

//Installieren oder abbrechen
procedure CurStepChanged(CurStep: TSetupStep);
var
  NewVersion: String;
  InstalledVersion: String;
begin
  if CurStep = ssInstall then
  begin
    NewVersion := MyPascalAppVersion;
    InstalledVersion := GetInstalledVersion();
    IsUpdate := FileExists(ExpandConstant('{app}\' + MyPascalExeName));

  if IsUpdate then
  begin
    if CompareVersions(NewVersion, InstalledVersion) > 0 then
    begin
      // Update Logik
      if MsgBox('Es ist eine neuere Version verfügbar. Möchten Sie das Update durchführen?', mbConfirmation, MB_YESNO) = IDYES then
      begin
        //MsgBox('Update wird ausgeführt', mbInformation, MB_OK);
      end
      else
      begin
        //MsgBox('Update abgebrochen.', mbInformation, MB_OK);
        WizardForm.Close;
      end;
    end
    else
    begin
      MsgBox('Sie haben bereits eine neuere Version installiert. Die Installation wird abgebrochen.', mbInformation, MB_OK);
      WizardForm.Close;
    end;
  end
    else
    begin
      // Neuinstallations-Logik
    end;
  end;
  if CurStep = ssPostInstall then
  begin
    // Aktualisieren der Versionsnummer in der Registry
    RegWriteStringValue(HKLM, 'Software\Classes\Applications\{#MyAppName}', 'Version', MyPascalAppVersion);
    //MsgBox('Versionsnummer in der Registry gesetzt: ' + MyPascalAppVersion, mbInformation, MB_OK);
  end;
end;
